// src/controllers/devisController.js
const { executeQuery } = require('../config/database');

class DevisController {
  
  // Cr√©er un nouveau devis
  static async create(req, res) {
    try {
      console.log('üì• Donn√©es re√ßues:', req.body);
      
      const { 
        nomDemandeur, 
        prenomDemandeur, 
        emailDemandeur, 
        budgetEstime, 
        description, 
        typeServiceId,
        employeId
      } = req.body;
      
      // V√©rifications basiques
      if (!nomDemandeur || !prenomDemandeur || !emailDemandeur || !budgetEstime || !description || !typeServiceId) {
        console.log('‚ùå Champs manquants:', { nomDemandeur, prenomDemandeur, emailDemandeur, budgetEstime, description, typeServiceId });
        return res.status(400).json({ 
          success: false, 
          message: 'Tous les champs obligatoires doivent √™tre remplis' 
        });
      }

      console.log('üîÑ G√©n√©ration du num√©ro de devis...');
      // G√©n√©rer le num√©ro de devis unique
      const numeroDevis = await generateNumeroDevis();
      console.log('‚úÖ Num√©ro de devis g√©n√©r√©:', numeroDevis);
      
      const query = `
        INSERT INTO Devis 
        (numeroDevis, nomDemandeur, prenomDemandeur, emailDemandeur, budgetEstime, description, typeServiceId, employeId, statut) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `;
      
      // Gestion des valeurs nulles/undefined
      const values = [
        numeroDevis, 
        nomDemandeur, 
        prenomDemandeur, 
        emailDemandeur, 
        budgetEstime, 
        description, 
        typeServiceId, 
        employeId || null, // G√©rer le cas o√π employeId est undefined
        'En attente'
      ];
      
      console.log('üìù Requ√™te SQL:', query);
      console.log('üìù Valeurs:', values);
      
      const result = await executeQuery(query, values);
      console.log('‚úÖ R√©sultat insertion:', result);
      
      res.status(201).json({
        success: true,
        message: 'Devis cr√©√© avec succ√®s',
        data: { id: result.insertId, numeroDevis }
      });
    } catch (error) {
      console.log('üí• ERREUR COMPL√àTE:', error);
      console.log('üí• Message d\'erreur:', error.message);
      console.log('üí• Stack trace:', error.stack);
      
      if (error.code === 'ER_DUP_ENTRY') {
        return res.status(409).json({ 
          success: false, 
          message: 'Ce num√©ro de devis existe d√©j√†' 
        });
      }
      
      res.status(500).json({ 
        success: false, 
        message: 'Erreur serveur: ' + error.message 
      });
    }
  }

  // Autres m√©thodes...
  static async getAll(req, res) {
    try {
      const query = `
        SELECT 
          d.*, 
          s.titre as serviceNom,
          u.nom as employeNom, 
          u.prenom as employePrenom
        FROM Devis d
        LEFT JOIN Service s ON d.typeServiceId = s.idService
        LEFT JOIN Utilisateur u ON d.employeId = u.idUtilisateur
        ORDER BY d.dateCreation DESC
      `;
      
      const results = await executeQuery(query);
      res.json({
        success: true,
        data: results
      });
      
    } catch (error) {
      console.log('üí• Erreur getAll:', error);
      res.status(500).json({ 
        success: false, 
        message: 'Erreur serveur' 
      });
    }
  }

  static async getById(req, res) {
    try {
      const { id } = req.params;
      const query = `
        SELECT 
          d.*, 
          s.titre as serviceNom,
          u.nom as employeNom, 
          u.prenom as employePrenom
        FROM Devis d
        LEFT JOIN Service s ON d.typeServiceId = s.idService
        LEFT JOIN Utilisateur u ON d.employeId = u.idUtilisateur
        WHERE d.idDevis = ?
      `;
      
      const results = await executeQuery(query, [id]);
      
      if (results.length === 0) {
        return res.status(404).json({ 
          success: false, 
          message: 'Devis non trouv√©' 
        });
      }
      
      res.json({
        success: true,
        data: results[0]
      });
      
    } catch (error) {
      console.log('üí• Erreur getById:', error);
      res.status(500).json({ 
        success: false, 
        message: 'Erreur serveur' 
      });
    }
  }

  static async update(req, res) {
    try {
      const { id } = req.params;
      const { statut } = req.body;

      if (!statut) {
        return res.status(400).json({ 
          success: false, 
          message: 'Le statut doit √™tre sp√©cifi√©' 
        });
      }

      const query = `
        UPDATE Devis SET statut = ? WHERE idDevis = ?
      `;
      const values = [statut, id];

      const result = await executeQuery(query, values);
      
      if (result.affectedRows === 0) {
        return res.status(404).json({ 
          success: false, 
          message: 'Devis non trouv√©' 
        });
      }
      
      res.json({
        success: true,
        message: 'Devis mis √† jour avec succ√®s'
      });
    } catch (error) {
      console.log('üí• Erreur update:', error);
      res.status(500).json({ 
        success: false, 
        message: 'Erreur serveur' 
      });
    }
  }

  static async delete(req, res) {
    try {
      const { id } = req.params;
      const query = `
        DELETE FROM Devis WHERE idDevis = ?
      `;
      
      const result = await executeQuery(query, [id]);
      
      if (result.affectedRows === 0) {
        return res.status(404).json({ 
          success: false, 
          message: 'Devis non trouv√©' 
        });
      }
      
      res.json({
        success: true,
        message: 'Devis supprim√© avec succ√®s'
      });
    } catch (error) {
      console.log('üí• Erreur delete:', error);
      res.status(500).json({ 
        success: false, 
        message: 'Erreur serveur' 
      });
    }
  }

  // R√©cup√©rer les devis assign√©s √† l'employ√© connect√©
  static async getAssignedToEmployee(req, res) {
    try {
      const employeId = req.user.idUtilisateur || req.user.id;
      const query = `
        SELECT d.*, s.titre as serviceNom
        FROM Devis d
        LEFT JOIN Service s ON d.typeServiceId = s.idService
        WHERE d.employeId = ?
        ORDER BY d.dateCreation DESC
      `;
      const results = await executeQuery(query, [employeId]);
      res.json({ success: true, data: results });
    } catch (error) {
      res.status(500).json({ success: false, message: 'Erreur serveur' });
    }
  }
}

// Fonction pour g√©n√©rer un num√©ro de devis unique
async function generateNumeroDevis() {
  try {
    const prefix = 'DEV';
    const date = new Date();
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    
    const query = `
      SELECT COUNT(*) as count
      FROM Devis
      WHERE numeroDevis LIKE ?
    `;
    
    const pattern = `${prefix}${year}${month}%`;
    console.log('üîç Pattern recherch√©:', pattern);
    
    const result = await executeQuery(query, [pattern]);
    console.log('üîç R√©sultat count:', result);
    
    const count = result[0].count + 1;
    const numeroDevis = `${prefix}${year}${month}${String(count).padStart(3, '0')}`;
    
    console.log('üéØ Num√©ro de devis final:', numeroDevis);
    return numeroDevis;
  } catch (error) {
    console.log('üí• Erreur generateNumeroDevis:', error);
    throw error;
  }
}

module.exports = DevisController;